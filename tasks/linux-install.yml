---
# tasks file for bot-service


# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - app_name
  - service_name
  - installation_folder
  - server_port
  - service_file_path
  - war_file_name
  - jar_file_name
  - ansible_user_id
  - launcher_file_name


- name: make sure bot folder exists
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  with_items:
    - "{{ installation_folder }}/model-worker/build/libs"
    - "{{ installation_folder }}/model-service"
  become: yes

# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes
  
# required java dependency

- name: make sure java is installed on the machine
  command: "{{ java_bin }} -version"
  register: java_test
  become: yes
  ignore_errors: yes
  notify:
    - start the service

- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# download the files

- name: download 'war' & 'jar' from s3 url
  get_url:
    url: "{{ item }}"
    dest: "{{ temp_folder }}"
    timeout: "{{ download_timeout | default(60) }}"
  with_items:
    - "{{ s3_download_url_war }}"
    - "{{ s3_download_url_jar }}"
  when: custom_download_url == ""

- name: download 'war' & 'jar' from custom url
  get_url:
    url: "{{ item }}"
    dest: "{{ temp_folder }}"
    timeout: "{{ download_timeout | default(60) }}"
  with_items:
    - "{{ custom_download_url }}"
    - "{{ custom_jar_download_url }}"
  when: custom_download_url != ""

- name: copy war file to installation folder
  copy:
    src: "{{ temp_folder }}/{{ war_file_name }}"
    dest: "{{ installation_folder }}/model-service/{{ war_file_name }}"
    remote_src: yes
  become: yes

- name: copy jar file to installation folder
  copy:
    src: "{{ temp_folder }}/{{ jar_file_name }}"
    dest: "{{ installation_folder }}/model-worker/build/libs/{{ jar_file_name }}"
    remote_src: yes
  become: yes

# - name: download 'war' from custom url
#   get_url:
#     url: "{{ custom_download_url }}"
#     dest: "{{ installation_folder }}/model-service/{{ war_file_name }}"
#     timeout: "{{ download_timeout | default(60) }}"

# - name: download 'jar' from custom url
#   get_url:
#     url: "{{ custom_jar_download_url }}"
#     dest: "{{ installation_folder }}/model-worker/build/libs/{{ jar_file_name }}"
#     timeout: "{{ download_timeout | default(60) }}"

# stop old service

- name: stop the old service
  systemd:
    name: "{{ service_name }}"
    state: stopped
  ignore_errors: yes
  become: yes
 
# copy service & start.sh

- name: copy service file
  template:
    src: systemd.service.j2
    dest: "{{ service_file_path }}"
  become: yes

- name: copy start script to installation folder
  template:
    src: start.sh.j2
    dest: "{{ installation_folder }}/model-service/{{ launcher_file_name }}"
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

